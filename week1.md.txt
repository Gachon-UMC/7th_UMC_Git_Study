# Git Study 1주차

## Git 이란 무엇일까?
파일의 변경 사항을 추적하고 여러 사용자 간에 해당 파일들의 작업들을 조율하기 위한 분산 버전 관리 시스템을 말한다.
<br>
1. 파일의 변경 사항을 추적
2. 여러 사용자 간에 해당 파일들의 작업들을 조율
3. 분산 버전 관리 시스템
<br>

## 파일이 관리되는 방법
 Git은 `분산 버전 관리 시스템`이며, 파일의 변경 사항을 추적하고 여러 사용자 간 작업 내용을 조율해준다는 내용을 학습했습니다 

Git이 파일의 변경 사항을 추적한다는 내용을 말씀드렸는데, 여러 파일들을 한꺼번에 관리해야 한다면 어떨까요?

Git은 **한 파일이 아닌 여러 파일도 관리할 수 있도록 저장소(`repository`)라는 개념을 사용**합니다

1. **나의 작업 공간 Working Directory** <br>
   내가 현재 작업하고 있는 공간(폴더)를 워킹 디렉토리(`working directory`)라고 부릅니다.
   워킹 디렉토리 내의 파일은 기본적으로 변경 사항이 모두 추적되지만, 그렇지 않은 파일들도 있습니다.
2. **내 파일의 변경사항을 반영하는 Staging Area** <br>
   `staged`는 commit을 위한 준비 단계이며 modified된 파일 중 선택적으로 해당 파일을 stage해서 해당 파일만 커밋할 수 있도록 하는 것입니다.
   이렇게 **modified된 파일을 stage하는 것**을 add라고 부르고 한꺼번에 모든 파일을 add하면 모든 파일이 staged가 되고 선택적으로 add하면 선택된 파일만 staged가 되게 됩니다.
   이렇게 `staged` 된 상태의 파일들을 `staging area`에 있다고 부릅니다.

3. **내 작업이 기록되는 곳, Local Repository** <br>
   `staging area`에 올라가 파일이 `staged` 상태가 되었을 때 체크포인트를 만드는 것을 `commit` 이라고 부른다.
   이렇게 `commit`을 통해 파일의 변경 사항을 기록하는 곳을 `Local Repository`라고 한다.
   <br>
   <br>

## Git 사용 방법
1. 원격 레포 생성하고 로컬 레포와 연결하기
    - Github 내 프로필에서 Repository 생성
    - git clone (레포지토리 주소) 명령어를 사용해 로컬 레포와 연결
2. .gitignore 로 파일 추적되지 않게 관리하기
    - touch .gitignore 명령어를 통해 gitignore 파일 생성
    - *.txt`를 통해 해당 확장자에서, folder_name/를 통해 해당 폴더에서 추적을 피하고 싶은 파일 추가
3. add, commit, push로 내 파일 추적 상태 관리하기
    - git add 명령어를 통해 파일을 add해 staged 상태로 변경
    - git commit 명령어를 통해 staged 된 파일들의 변경 사항을 로컬 레포에 반영
    - git push origin 명령어를 통해 로컬 레포에 반영된 내용을 원격 레포로 보냄
4. 내 파일 상태 확인하기
    - git status 를 활용해 파일 상태 확인
  
<br>

## 브랜치(Branch)
내가 작업하는 독립적인 영역을 의미하며 한 시점에서 서로에게 영향을 주지 않는 작업을 진행하기 위해 브랜치를 생성한다.
- 'git branch (브랜치 이름)' 명령어를 통해 브랜치를 생성
- 'git checkout (브랜치 이름)' 또는 'git switch (브랜치 이름)' 명령어를 통해 브랜치 이동
- 'git merge (병합할 브랜치)' 명령어를 통해 브랜치 병합

<br>

## Issue와 PR은 무엇인가
- Issue란 main 브랜치에서 기능 브랜치를 나누기 전 팀원들과 프로젝트의 작업 진행 현황과 기능 구현, 버그 수정 등을 공유하기 위해 생성하는 것<br>
- PR이란 Pull Request의 줄임말로 메인 브랜치에게 Pull을 받아줄 것을 요청(Request)하는 것을 의미합니다. 
<br>이 과정을 통해 작업한 내용을 메인 브랜치로 반영합니다.










  